function handlers(varargin)
    %HANDLERS('identifier', @function, 'identifier', @function...)
    %HANDLERS is a replacement for the type-specific exception handlers
    %provided by many more reasonable programming languages such as Java,
    %Python, C++.
    %
    %The arguments are pairs consisting of an identifier fragment and
    %handler functions it will trigger. The identifier fragments are 
    %compared against the identifier form lasterrer, and the first 
    %fragment that matches determines the handler that will be run.
    err = lasterror;
    
    %TODO: it may be worth trapping exceptions generated by the handler adn
    %adding 'caused by' information
    
    if (mod(nargin,2) ~= 0)
        error('handlers:illegalArgument', ...
            'need matched error/handler pairs');
    end
    
    fragments = varargin(1:2:nargin);
    handlers = varargin(2:2:nargin);
    
    if ~all(cellfun(@ischar, fragments))
        error('handlers:illegalArgument', ...
            'error identifiers should be strings');
    end
    
    if ~all(cellfun(@(x)isa(x, 'function_handle'), handlers))
        error('handlers:illegalArgument', ...
            'error handlers should be function handles');
    end
    
    for pair = {fragments{:}; handlers{:}}
        if errormatch(pair{1}, err.identifier)
            pair{2}(err);
            return; %dispatch to the handler, and done
        end
    end
    
    %nothing matched, so we rethrow
    rethrow(err);
end