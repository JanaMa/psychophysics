function this = BaseBytesTest(varargin)

    this = publicize(autoobject(varargin{:}));

    function check(varargin)
        error('abstract method');
    end
    
    function testDouble()
        this.check( double(0), -1, uint8([191 240 0 0 0 0 0 0]) );
    end

    function testSingle()
        this.check...
            ( single(0)...
            , -1 ...
            , uint8([191  128    0    0]) ...
            );
    end


    function testInt32()
        this.check...
            ( int32(0) ...
            , -65537 ...
            , uint8([255 254 255 255])...
            );
    end

    function testInt16()
        this.check...
            ( int16(0)...
            , -32767 ...
            , uint8([128 1])...
            );
    end

    function testInt8()
        this.check...
            ( int8(0)...
            , -2 ...
            , uint8([254])...
            );
    end

    function testUint32()
        this.check...
            ( int32(0) ...
            , -65537 ...
            , uint8([255 254 255 255])...
            );
    end

    function testUint16()
        this.check...
            ( int16(0)...
            , -32767 ...
            , uint8([128 1])...
            );
    end

    function testUint8()
        this.check...
            ( int8(0) ...
            , -2 ...
            , uint8([254])...
            );
    end

    function testNumericArray()
        this.check...
            ( int16([0 0; 0 0]) ...
            , [-45  5894; -2348 349] ...
            , uint8([255 211 246 212 23 6 1 93]) ...
            );
    end

    function testLENumericArray()
        this.check...
            ( int16([0 0; 0 0]) ...
            , [-45  5894; -2348 349] ...
            , uint8([211 255 212 246 6 23 93 1]) ...
            , 'littleendian', 1 ...
            );        
    end

    function testBlankArray()
        this.check...
            ( zeros(0, 2, 'int16')...
            , [-45 5894; -2348 349] ...
            , uint8([255 211 246 212 23 6 1 93]) ...
            );      
    end

    function testLEBlankArray()
        this.check...
            ( zeros(0, 2, 'int16') ...
            , [-45 5894; -2348 349] ...
            , uint8([211 255 212 246 6 23 93 1]) ...
            , 'littleendian', 1 ...
            );
    end

    function testLEArraysWithBlanks()
        this.check...
            ( {int16([0 0; 0 0]), uint16([]), int32([0;0])} ...
            , {[-45 5894; -2348 349], [123;456;789], [16777217;10000000]} ...
            , uint8([211 255 212 246 6 23 93 1 123 0 200 1 21 3 1 0 0 1 128 150 152 0]) ...
            , 'littleendian', 1 ...
            );
    end

    function testStructIteration
        this.check...
            ( struct('first', uint8(0), 'second', uint8(0))...
            , struct('second', 2, 'first', 1) ...
            , uint8([1 2])...
            );
    end

    function testStructArray
        this.check...
            ( struct('a', {uint8(0) uint8(0)}, 'b', {uint8(0) uint8(0)}) ...
            , [struct('a', 1, 'b', 2) struct('a', 3, 'b', 4)] ...
            , uint8([1 2 3 4]) ...
            );
    end

    function testCellIteration
        this.check...
            (  {double(0), single(0), uint16(0)}...
            , {2.3 -1 258} ...
            , uint8([64 2 102 102 102 102 102 102 191 128 0 0 1 2])...
            );
    end

    function testLogical
        this.check ...
            ( false(1,8) ...
            , [0 0 0 1 0 0 1 0] ...
            , uint8(18) ...
            );
    end

    function testLogicalOverlap
        this.check ...
            ( {false(1,5) false(3, 1)} ...
            , {[0 0 1 0 0], [1;1;1]} ...
            , uint8([39]) ...
            );
    end

    function testLogicalCollapse
        this.check ...
            ( {uint8(0) true(1, 5) false(3, 1) uint8(0) true(8, 1) uint8(0)} ...
            , {0, logical([0 0 1 0 0]'), logical([1 0 1]'), 42, 42, 255} ...
            , uint8([0 37 42 42 255]) ...
            );
    end

    function testIntegerToLogical
        this.check ...
            ( {true(5,1) true(3, 1)} ...
            , {4, 7} ...
            , uint8([39]) ...
            );
    end

    function testIntegerToLogicalArray
        this.check ...
            ( true(8, 2) ...
            , [15;240] ...
            , uint8([15 240]) ...
            );
    end

    function testLogicalToLogical
        this.check ...
            ( {false(5,1) false(3, 1)} ...
            , {logical([0;0;1;0;0]), logical([1;1;1])} ...
            , uint8([39]) ...
            );
    end

    function testEmptyTemplateArray
        this.check ...
            ( {uint8([0]) uint16([]) uint8(0)} ...
            , {12, [32 54]', 100} ...
            , uint8([12 0 32 0 54 100]) ...
            );
    end

    function testLESingle
        this.check...
            ( single(0)...
            , -1 ...
            , uint8([0 0 128 191]) ...
            , 'littleendian', 1 ...
            );
    end

    function testLEDouble()
        this.check...
            ( double(0)...
            , -1 ...
            , uint8([0 0 0 0 0 0 240 191]) ...
            , 'littleendian', 1 ...
            );
    end

    function testLEInt()
        this.check...
            ( int16(0)...
            , -2 ...
            , uint8([254 255]) ...
            , 'littleendian', 1 ...
            );
    end

    function testLELogical()
        this.check...
            ( true(16,1) ...
            , 65281 ...
            , uint8([1 255]) ...
            , 'littleendian', 1 ...
            );
    end

    function testLELogicalOverlap()
        this.check...
            ( {true(12, 1), true(12, 1)}...
            , {4095 0}...
            , uint8([255 15 0]) ...
            , 'littleendian', 1 ...
            );
    end

    function testLEBlankInt()
        this.check...
            ( int16([]) ...
            , -2 ...
            , uint8([254 255]) ...
            , 'littleendian', 1 ...
            );
    end

    function testBlankFloat()
        this.check...
            ( single([]) ...
            , [-1;1] ...
            , uint8([191 128 0 0 63 128 0 0])...
            );
    end

    function testLEBlankFloat()
        this.check...
            ( single([]) ...
            , [-1;1] ...
            , uint8([0 0 128 191 0 0 128 63])...
            , 'littleendian', 1 ...
            );
    end
    
   function testLEBlankLogicalOverlap()
        this.check...
            ( false(12, 0) ....
            , [1 1 1 1 1 1 1 1 1 1 1 1; 0 0 0 0 0 0 0 0 0 0 0 0]'...
            , uint8([255 15 0]) ...
            , 'littleendian', 1 ...
            );
    end
    
    function testBlankLogicalOverlap()
        this.check...
            ( false(12, 0) ....
            , [1 1 1 1 1 1 1 1 1 1 1 1; 0 0 0 0 0 0 0 0 0 0 0 0]'...
            , uint8([255 240 0]) ...
            );
    end

%{
    function testInt64()
        assertEquals...
            ( tobytes(int64(0), -65537) ...
            , uint8([255 255 255 255 255 254 255 255]) );
    end

    function testUint64()
        assertEquals...
            ( tobytes(int64(0), -65537) ...
            , uint8([255 255 255 255 255 254 255 255]) );
    end
%}

end