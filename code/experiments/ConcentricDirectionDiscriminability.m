function this = ConcentricDirectionDiscriminability(varargin)
    this = ConcentricDirectionConstant();
    this.caller=getversion(1);
    
    %we want eight 3up/1down staircases, for direction discrimination in
    %counterphase contrast and in delta-x, for each eccentricity.
    
    this.trials.remove('extra.r');
    this.trials.remove('extra.nTargets');
    this.trials.remove('extra.globalDirection');
    this.trials.remove('extra.localDirection');
    
    %since the grid experiment we use a factor of 3/2. Here we subdivide
    %that into fourths.
    
    makeDxStaircase = @()DiscreteStaircase...
        ( 'criterion', @directionCorrect...
        , 'Nup', 1, 'Ndown', 2 ...
        , 'valueSet', 0.75 * ((3/2) .^ ((-30:2)/2)), 'currentIndex', 10);
    dxStaircase1 = makeDxStaircase();
    dxStaircase2 = makeDxStaircase();
    dxStaircase3 = makeDxStaircase();
    dxStaircase4 = makeDxStaircase();
    dxStaircase5 = makeDxStaircase();

    makeContrastStaircase = @()DiscreteStaircase...
        ( 'criterion', @directionCorrect...
        , 'Nup', 1, 'Ndown', 3 ...
        , 'valueSet', logspace(log10(0.005), log10(1), 40), 'currentIndex', 30);
    contrastStaircase1 = makeContrastStaircase();
    contrastStaircase2 = makeContrastStaircase();
    contrastStaircase3 = makeContrastStaircase();
    contrastStaircase4 = makeContrastStaircase();
    contrastStaircase5 = makeContrastStaircase();
    
    this.trials.addBefore...
        ('extra.phase' ...
        , { 'extra.r'...
          , 'extra.dx'...
          , 'extra.nTargets' ...
          , 'extra.globalVScalar'...
          , 'extra.directionContrast'...
          , 'extra.localDirection' ...
          , 'extra.globalDirection'...
          } ...
        , { {20/3,    0,   5, dxStaircase1, 1,        0, -1} ...
          , {20/3,    0,   5, dxStaircase1, 1,        0,  1} ...
          , {20/3,    0,   7, dxStaircase2, 1,        0, -1} ...
          , {20/3,    0,   7, dxStaircase2, 1,        0,  1} ...
          , {20/3,    0,  10, dxStaircase3, 1,        0, -1} ...
          , {20/3,    0,  10, dxStaircase3, 1,        0,  1} ...
          , {20/3,    0,  14, dxStaircase4, 1,        0, -1} ...
          , {20/3,    0,  14, dxStaircase4, 1,        0,  1} ...
          , {20/3,    0,  20, dxStaircase5, 1,        0, -1} ...
          , {20/3,    0,  20, dxStaircase5, 1,        0,  1} ...
          , {20/3,    0,   5, 0, contrastStaircase1, -1,  0} ...
          , {20/3,    0,   5, 0, contrastStaircase1,  1,  0} ...
          , {20/3,    0,   7, 0, contrastStaircase2, -1,  0} ...
          , {20/3,    0,   7, 0, contrastStaircase2,  1,  0} ...
          , {20/3,    0,  10, 0, contrastStaircase3, -1,  0} ...
          , {20/3,    0,  10, 0, contrastStaircase3,  1,  0} ...
          , {20/3,    0,  14, 0, contrastStaircase4, -1,  0} ...
          , {20/3,    0,  14, 0, contrastStaircase4,  1,  0} ...
          , {20/3,    0,  20, 0, contrastStaircase5, -1,  0} ...
          , {20/3,    0,  20, 0, contrastStaircase5,  1,  0} ...
        });

    this.trials.add('desiredResponse', 0);

    this.trials.reps = 40;
    this.trials.blockSize = 160;
    
    function correct = directionCorrect(trial, result)
        correct = 0;
        if result.success == 1
            gd = trial.property__('extra.globalDirection');
            ld = trial.property__('extra.localDirection');
            if (sign(gd) == -sign(ld))
                return
            end
            if gd == 0
                if result.response == -ld
                    correct = 1;
                else
                    correct = -1;
                end
            else
                if result.response == -gd;
                    correct = 1;
                else
                    correct = -1;
                end
            end
        end
    end
    
    this.property__(varargin{:});
end
