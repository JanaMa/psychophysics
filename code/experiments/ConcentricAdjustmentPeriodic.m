function this = ConcentricAdjustmentPeriodic(varargin)
    
    this = Experiment('inputUsed', {'keyboard', 'knob', 'audioout'});

    this.trials.base = ConcentricAdjustmentPeriodicTrial('useEyes', 0);
    this.trials.interTrialInterval = 0;
    
    % use 0.4 for NS. 
    this.trials.base.extra.directionContrast = 0.4;
    this.trials.base.extra.r = 20/3;
%%
    this.trials.add({'extra.localDirection', 'extra.globalDirection', 'knobDirection'}, {{1 -1 -1} {-1 1 1}});

    %valueSet = [-.1 .* (3/2).^((7:-1:1).*3./4) -.1:.0375:.1 .1 .* (3/2).^((1:7).*3./4)];
    valueSet = [-.1 * 1.5.^(5:-1:1) -.1:.05:.1 .1 .* 1.5.^(1:5)];
    densitySet = unique(round(1./logspace(log10(1/4), log10(1/30), 16)));
    
    %Add on this whole gridness of parameters.
    
    %this variant: different contrasts at a single eccentricity

    this.trials.add({'extra.nTargets', 'extra.globalVScalar'}...
                    , arrayfun(@(x,y){x,y} ...
                        , [4    8   12   16   20] ...
                        , [-0.1 0.0 0.1 0.2  0.3] ...
                        , 'UniformOutput', 0));
    this.trials.add('extra.directionContrast', [0.1 0.2 0.4 0.6]);
    this.trials.add...
        ( {'parameter', 'parameterValues', 'parameterIndex'}...
        , { {'extra.globalVScalar', fliplr(valueSet), []} ...
        , {'extra.nTargets', densitySet, []} ...
        } ...
        )
    this.trials.reps = 4;
%}
 
% this variant: just eccentricity, adjusting both axes
%{
this.trials.add('extra.r', [10 20/3 40/9 80/27]);

this.trials.add({'extra.nTargets', 'extra.globalVScalar'}...
                    , arrayfun(@(x,y){x,y} ...
                        , [8 12 16 20 24] ...
                        , [0.0 0.1 0.2 0.3 0.4] ...
                        , 'UniformOutput', 0));
this.trials.add...
    ( {'parameter', 'parameterValues', 'parameterIndex'}...
    , { {'extra.globalVScalar', fliplr(valueSet), []} ...
    , {'extra.nTargets', densitySet, []} ...
    } ...
    )
this.trials.reps = 4;

%}


%this variant; eccentricity vs. wavelength    
%{
    this.trials.add('extra.r', [10 20/3 40/9]);
    this.trials.add('extra.wavelengthScalar', this.trials.base.extra.wavelengthScalar .* [2/3 1 3/2]);
    this.trials.add({'extra.nTargets', 'extra.globalVScalar'}...
                    , arrayfun(@(x,y){x,y} ...
                        , [8 12 16 20 24] ...
                        , [0.0 0.1 0.2 0.3 0.4] ...
                        , 'UniformOutput', 0));
    this.trials.add...
        ( {'parameter', 'parameterValues', 'parameterIndex'}...
        , { {'extra.globalVScalar', fliplr(valueSet), []} ...
%        , {'extra.nTargets', densitySet, []} ...
        } ...
        )
%}    

%    this variant; eccentricity vs. temporal frequency    
%{
    this.trials.add('extra.r', [10 20/3 40/9]);
    this.trials.add('extra.tf', 10*[2/3 1 3/2]);
    this.trials.add({'extra.nTargets', 'extra.globalVScalar'}...
                    , arrayfun(@(x,y){x,y} ...
                        , [8 12 16 20] ...
                        , [0.0 0.1 0.2 0.3] ...
                        , 'UniformOutput', 0));
    
    this.trials.add...
        ( {'parameter', 'parameterValues', 'parameterIndex'}...
        , { {'extra.globalVScalar', fliplr(valueSet), []} ...
%          , {'extra.nTargets', densitySet, []} ...
        } ...
      );

%}  

    %set these in parallel; one or the other of thee will get overridden by
    %the adjustment. sneaky, eh?
    
       
    this.trials.fullFactorial = 1;
    this.trials.requireSuccess = 1;
    this.trials.blockSize = this.trials.numLeft() / 5;

    this.trials.startTrial = MessageTrial('message', @()sprintf('Use knob to adjust until motion nulls or reverses. \nPress space bar if motion can''t null.\nPress knob to begin.\n%d blocks in experiment', this.trials.blocksLeft()));
    this.trials.endBlockTrial = MessageTrial('message', @()sprintf('Take a break, stretch, adjust your chair, etc.\nPress knob to continue.\n%d blocks remain', this.trials.blocksLeft()));

    %{
this.trials.blockTrial = EyeCalibrationMessageTrial...
        ( 'minCalibrationInterval', 0 ...
        , 'base.absoluteWindow', Inf ...
        , 'base.maxLatency', 0.5 ...
        , 'base.fixDuration', 0.5 ...
        , 'base.fixWindow', 4 ...
        , 'base.rewardDuration', 10 ...
        , 'base.settleTime', 0.3 ...
        , 'base.targetRadius', 0.2 ...
        , 'base.plotOutcome', 0 ...
        , 'base.onset', 0 ...
        , 'maxStderr', 0.5 ...
        , 'minN', 10 ...
        , 'maxN', 50 ...
        , 'interTrialInterval', 0.4 ...
        );
    %}

    this.trials.endTrial = MessageTrial('message', sprintf('All done!\nPress knob to save and exit.\nThanks!'));
    
    this.property__(varargin{:});
end