function this = ConcentricDirectionDiscriminabilityCritDistance_ml(this)
    disp('configuring for ml');
    
    this.trials.remove({ 'extra.r' ...
        , 'extra.nTargets' ...
        , 'extra.globalVScalar'...
        , 'extra.directionContrast'...
        });

    valueSet = [-.1 .* (3/2).^((8:-1:1).*3./4) -.1:.0375:.1 .1 .* (3/2).^((1:8).*3./4)];

    makeDxUpperStaircase = @()DiscreteStaircase...
        ( 'criterion', @directionCorrect...
        , 'Nup', 1, 'Ndown', 3, 'useMomentum', 1 ...
        , 'valueSet', valueSet, 'currentIndex', 6);
    
    %a 3-up, 1-down staircase
    makeDxLowerStaircase = @()DiscreteStaircase...
        ( 'criterion', @directionCorrect...
        , 'Nup', 3, 'Ndown', 1, 'useMomentum', 1 ...
        , 'valueSet', valueSet, 'currentIndex', 15);
   
    this.trials.addBefore...
        ( 'extra.phase' ...
        , { 'extra.r' ...
          , 'extra.nTargets' ...
          , 'extra.globalVScalar' ...
          , 'extra.directionContrast' ...
          , 'extra.wavelengthScalar' ...
          } ...
        , { { 20/3, 4,  makeDxUpperStaircase(),   .40, .075} ...
          , { 20/3, 4,  makeDxLowerStaircase(),   .40, .075} ...
          , { 20/3, 8,  makeDxUpperStaircase(),   .40, .075} ...
          , { 20/3, 8,  makeDxLowerStaircase(),   .40, .075} ...
          , { 20/3, 12, makeDxUpperStaircase(),   .40, .075} ...
          , { 20/3, 12, makeDxLowerStaircase(),   .40, .075} ...
          , { 20/3, 16, makeDxUpperStaircase(),   .40, .075} ...
          , { 20/3, 16, makeDxLowerStaircase(),   .40, .075} ...
          , { 20/3, 20, makeDxUpperStaircase(),   .40, .075} ...
          , { 20/3, 20, makeDxLowerStaircase(),   .40, .075} ...
          , { 20/3, 4,  makeDxUpperStaircase(),   .40, .050} ...
          , { 20/3, 4,  makeDxLowerStaircase(),   .40, .050} ...
          , { 20/3, 8,  makeDxUpperStaircase(),   .40, .050} ...
          , { 20/3, 8,  makeDxLowerStaircase(),   .40, .050} ...
          , { 20/3, 12, makeDxUpperStaircase(),   .40, .050} ...
          , { 20/3, 12, makeDxLowerStaircase(),   .40, .050} ...
          , { 20/3, 16, makeDxUpperStaircase(),   .40, .050} ...
          , { 20/3, 16, makeDxLowerStaircase(),   .40, .050} ...
          , { 20/3, 20, makeDxUpperStaircase(),   .40, .050} ...
          , { 20/3, 20, makeDxLowerStaircase(),   .40, .050} ...
          , { 20/3, 4,  makeDxUpperStaircase(),   .40, .1125} ...
          , { 20/3, 4,  makeDxLowerStaircase(),   .40, .1125} ...
          , { 20/3, 8,  makeDxUpperStaircase(),   .40, .1125} ...
          , { 20/3, 8,  makeDxLowerStaircase(),   .40, .1125} ...
          , { 20/3, 12, makeDxUpperStaircase(),   .40, .1125} ...
          , { 20/3, 12, makeDxLowerStaircase(),   .40, .1125} ...
          , { 20/3, 16, makeDxUpperStaircase(),   .40, .1125} ...
          , { 20/3, 16, makeDxLowerStaircase(),   .40, .1125} ...
          , { 20/3, 20, makeDxUpperStaircase(),   .40, .1125} ...
          , { 20/3, 20, makeDxLowerStaircase(),   .40, .1125} ...
%}
%{
        , { { 20/3, 6,  makeDxUpperStaircase(),   0.4} ...
          , { 20/3, 6,  makeDxLowerStaircase(),   0.4} ...
          , { 20/3, 12, makeDxUpperStaircase(),   0.4} ...
          , { 20/3, 12, makeDxLowerStaircase(),   0.4} ...
          , { 20/3, 18, makeDxUpperStaircase(),   0.4} ...
          , { 20/3, 18, makeDxLowerStaircase(),   0.4} ...
          , { 20/3, 24, makeDxUpperStaircase(),   0.4} ...
          , { 20/3, 24, makeDxLowerStaircase(),   0.4} ...
          , { 20/3, 6,  makeDxUpperStaircase(),   0.2} ...
          , { 20/3, 6,  makeDxLowerStaircase(),   0.2} ...
          , { 20/3, 12, makeDxUpperStaircase(),   0.2} ...
          , { 20/3, 12, makeDxLowerStaircase(),   0.2} ...
          , { 20/3, 18, makeDxUpperStaircase(),   0.2} ...
          , { 20/3, 18, makeDxLowerStaircase(),   0.2} ...
          , { 20/3, 24, makeDxUpperStaircase(),   0.2} ...
          , { 20/3, 24, makeDxLowerStaircase(),   0.2} ...
%{
%}
%}
          } ...
          );
%}  
  %}
%{
    this.trials.addBefore...
        ( 'extra.phase' ...
        , { 'extra.r' ...
          , 'extra.nTargets' ...
          , 'extra.globalVScalar'...
          , 'extra.directionContrast'...
          } ...
          , { { 10,     4, makeDxUpperStaircase(),    .40} ...
            , { 10,     4, makeDxLowerStaircase(),    .40} ...
            , { 20/3,   4, makeDxUpperStaircase(),    .40} ...
            , { 20/3,   4, makeDxLowerStaircase(),    .40} ...
            , { 40/9,   4, makeDxUpperStaircase(),    .40} ...
            , { 40/9,   4, makeDxLowerStaircase(),    .40} ...
            , { 10,     8, makeDxUpperStaircase(),    .40} ...
            , { 10,     8, makeDxLowerStaircase(),    .40} ...
            , { 20/3,   8, makeDxUpperStaircase(),    .40} ...
            , { 20/3,   8, makeDxLowerStaircase(),    .40} ...
            , { 40/9,   8, makeDxUpperStaircase(),    .40} ...
            , { 40/9,   8, makeDxLowerStaircase(),    .40} ...
            , { 10,     16, makeDxUpperStaircase(),   .40} ...
            , { 10,     16, makeDxLowerStaircase(),   .40} ...
            , { 20/3,   16, makeDxUpperStaircase(),   .40} ...
            , { 20/3,   16, makeDxLowerStaircase(),   .40} ...
            , { 40/9,   16, makeDxUpperStaircase(),   .40} ...
            , { 40/9,   16, makeDxLowerStaircase(),   .40} ...
            , { 10,     20, makeDxUpperStaircase(),   .40} ...
            , { 10,     20, makeDxLowerStaircase(),   .40} ...
            , { 20/3,   20, makeDxUpperStaircase(),   .40} ...
            , { 20/3,   20, makeDxLowerStaircase(),   .40} ...
            , { 40/9,   20, makeDxUpperStaircase(),   .40} ...
            , { 40/9,   20, makeDxLowerStaircase(),   .40} ...
            } ...
%{
        , { { 20/3, 4,  makeDxUpperStaircase(),   .20} ...
          , { 20/3, 4,  makeDxLowerStaircase(),   .20} ...
          , { 20/3, 7,  makeDxUpperStaircase(),   .20} ...
          , { 20/3, 7,  makeDxLowerStaircase(),   .20} ...
          , { 20/3, 10, makeDxUpperStaircase(),   .20} ...
          , { 20/3, 10, makeDxLowerStaircase(),   .20} ...
          , { 20/3, 12, makeDxUpperStaircase(),   .20} ...
          , { 20/3, 12, makeDxLowerStaircase(),   .20} ...
          , { 20/3, 16, makeDxUpperStaircase(),   .20} ...
          , { 20/3, 16, makeDxLowerStaircase(),   .20} ...
          , { 20/3, 20, makeDxUpperStaircase(),   .20} ...
          , { 20/3, 20, makeDxLowerStaircase(),   .20} ...
          , { 20/3, 24, makeDxUpperStaircase(),   .20} ...
          , { 20/3, 24, makeDxLowerStaircase(),   .20} ...
          } ...
%}
      );
        %}
  
     %this.trials.base.maxResponseLatency = 0.55;
%    this.trials.base.extra.instruction = 'spots';
%    this.trials.startTrial.message = @()sprintf('Look for the movement of the individual spots.\nPress knob to begin.\n%d blocks in experiment', this.trials.blocksLeft());
%    this.trials.endBlockTrial.message = @()sprintf('Take a break, stretch, adjust your chair, etc.\nPress knob to continue.\n%d blocks remain\nLook for the motion of individual spots.', this.trials.blocksLeft());

    
    %determines whether the detected mtoion direction aggrees with global
    %displacement.
    function correct = directionCorrect(trial, result)
        correct = 0;
        if result.success == 1
            gd = trial.property__('extra.globalDirection');
            ld = trial.property__('extra.localDirection');
            if (sign(gd) == -sign(ld))
                return
            end
            if gd == 0
                if result.response == -ld
                    correct = 1;
                else
                    correct = -1;
                end
            else
                if result.response == -gd;
                    correct = 1;
                else
                    correct = -1;
                end
            end
        end
    end
    
    this.trials.reps = 1;
    this.trials.reps = floor(1050/this.trials.numLeft());
    this.trials.blockSize = this.trials.numLeft() / 5;    
end