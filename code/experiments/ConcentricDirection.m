function e = ConcentricDirection(varargin)

    params = namedargs ...
        ( localExperimentParams() ...
        , 'skipFrames', 1  ...
        , 'priority', 9 ...
        , 'hideCursor', 0 ...
        , 'doTrackerSetup', 0 ...
        , 'input', struct ...
            ( 'keyboard', KeyboardInput() ...
            , 'knob', PowermateInput() ...
            ) ...
        , varargin{:});
    
    e = Experiment('params', params);

    e.trials.base = ConcentricTrial...
        ( 'awaitInput', 1 ...
        , 'motion', CauchySpritePlayer ...
            ( 'process', CircularCauchyMotion ...
                ( 'radius', 10 ...
                , 'dt', 0.15 ...
                , 'dphase', 0.5/10 ...
                , 'x', 0 ...
                , 'y', 0 ...
                , 't', 0.5 ...
                , 'n', 5 ...
                , 'color', [0.5 0.5 0.5]' ...
                , 'velocity', -5 ... %velocity of peak spatial frequency
                , 'wavelength', 2/3 * .5 ...
                , 'width', 0.5 ...
                , 'duration', 0.1 ...
                , 'order', 4 ...
                ) ...
            ) ...
        );
        
    %randomize global and local direction....
    e.trials.add('motion.process.velocity', [-1 1] * e.trials.base.motion.process.velocity);
    e.trials.add('motion.process.radius', [5 6 7 8]);

    e.trials.add('extra.relativeVelocity', [-1 1]);
    e.trials.add('motion.process.dphase', @(b)b.extra.relativeVelocity .* b.motion.process.velocity .* b.motion.process.dt ./ b.motion.process.radius);
    
    %pick a number of targets, and spread them around the circle
    e.trials.add('extra.nTargets', 6:2:20);
    e.trials.add('motion.process.phase', @(b) mod(rand()*2*pi + (0:b.extra.nTargets-1)/b.extra.nTargets*2*pi, 2*pi));
    e.trials.add('motion.process.angle', @(b) mod(b.motion.process.phase * 180/pi + 90, 360));
    e.trials.add('awaitInput', @(b) max(b.motion.process.t + b.motion.process.dt .* b.motion.process.n));
    
    %say, 8 samples for each N, after folding directions?
    e.trials.reps = 16;
    e.trials.blockSize = 128;
    
    e.trials.fullFactorial = 1;
    e.trials.blockTrial = MessageTrial('message', @()sprintf('Press knob to continue. %d blocks remain', e.trials.blocksLeft()));
end