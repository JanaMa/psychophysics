function this = ConcentricAdjustment(varargin)
    
    this = Experiment('inputUsed', {'keyboard', 'knob', 'audioout'});

    this.trials.base = ConcentricAdjustmentTrial('useEyes', 0);
    this.trials.interTrialInterval = 0;
    
    this.trials.base.extra.directionContrast = 0.4;
    
%%
    this.trials.add({'extra.localDirection', 'extra.globalDirection', 'knobDirection'}, {{1 -1 -1} {-1 1 1}});

    %Add on this whole gridness of parameters.
    %this.trials.add('extra.r', [10 20/3 40/9]);
    %this.trials.add('extra.directionContrast', [0.1 0.2 0.4 1]);
    %this.trials.add('extra.wavelengthScalar', this.trials.base.extra.wavelengthScalar .* [2/3 1 3/2]);
    
    %set these in parallel; one or the other of thee will get overridden by
    %the adjustment. sneaky, eh?
    this.trials.add({'extra.nTargets', 'extra.globalVScalar'}...
                    , arrayfun(@(x,y){x,y} ...
                        , [4    8   12   16   20] ...
                        , [-0.1 0.1 0.2  0.3 0.4] ...
                        , 'UniformOutput', 0));
    
    this.trials.add...
        ( {'parameter', 'parameterValues', 'parameterIndex'}...
        , { {'extra.nTargets', [4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20 22 24 27 30], 4} ...
          , {'extra.nTargets', [4 5 6 7 8 9 10 12 13 14 15 16 17 18 19 20 22 24 27 30], 17} ...
          , {'extra.globalVScalar', [0.75:-0.075:-0.75], 11} ...
          , {'extra.globalVScalar', [0.75:-0.075:-0.75], 21} ...
          } ...
        );
    
    this.trials.reps = 2;
    this.trials.fullFactorial = 1;
    this.trials.requireSuccess = 1;
    this.trials.blockSize = 48;

    this.trials.startTrial = MessageTrial('message', @()sprintf('Use knob to adjust until motion balances. \n Press DELETE if motion can''t balance\nPress knob to begin.\n%d blocks in experiment', this.trials.blocksLeft()));
    this.trials.endBlockTrial = MessageTrial('message', @()sprintf('Take a break, stretch, adjust your chair, etc.\nPress knob to continue.\n%d blocks remain', this.trials.blocksLeft()));

    %{
this.trials.blockTrial = EyeCalibrationMessageTrial...
        ( 'minCalibrationInterval', 0 ...
        , 'base.absoluteWindow', Inf ...
        , 'base.maxLatency', 0.5 ...
        , 'base.fixDuration', 0.5 ...
        , 'base.fixWindow', 4 ...
        , 'base.rewardDuration', 10 ...
        , 'base.settleTime', 0.3 ...
        , 'base.targetRadius', 0.2 ...
        , 'base.plotOutcome', 0 ...
        , 'base.onset', 0 ...
        , 'maxStderr', 0.5 ...
        , 'minN', 10 ...
        , 'maxN', 50 ...
        , 'interTrialInterval', 0.4 ...
        );
    %}

    this.trials.endTrial = MessageTrial('message', sprintf('All done!\nPress knob to save and exit.\nThanks!'));
    
    this.property__(varargin{:});
end